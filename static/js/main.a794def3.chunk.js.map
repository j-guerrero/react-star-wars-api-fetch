{"version":3,"sources":["components/FindPlanet.js","components/PlanetInformation.js","containers/App.js","serviceWorker.js","index.js"],"names":["FindPlanet","_ref","handleClick","react_default","a","createElement","type","onClick","id","PlanetInformation","planetInfo","class","name","climate","population","diameter","rotation_period","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","randomNumber","Math","floor","random","fetch","response","json","data","setState","components_PlanetInformation","FindPlanet_FindPlanet","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAEaA,SAAa,SAAAC,GAAqB,IAAlBC,EAAkBD,EAAlBC,YAC5B,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASC,QAASL,EAAaM,GAAG,oBAA/C,yBCSYC,EAZW,SAAAR,GAAoB,IAAjBS,EAAiBT,EAAjBS,WAC5B,OACCP,EAAAC,EAAAC,cAAA,OAAKM,MAAM,qBACXR,EAAAC,EAAAC,cAAA,2BAAuBK,EAAWE,KAAlC,KACAT,EAAAC,EAAAC,cAAA,6BAAyBK,EAAWG,SACpCV,EAAAC,EAAAC,cAAA,gCAA4BK,EAAWI,YACvCX,EAAAC,EAAAC,cAAA,8BAA0BK,EAAWK,UACrCZ,EAAAC,EAAAC,cAAA,qCAAiCK,EAAWM,mBCgD/BC,cAjDd,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACZd,KAAM,GACNC,QAAS,GACTC,WAAY,GACZC,SAAS,GACTC,gBAAgB,IAGjBG,EAAKjB,YAAciB,EAAKjB,YAAYyB,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IAXFA,sMAgBXU,EAAiBC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,WAChCC,MAAM,gCAAkCJ,EAAe,mBAAxEK,kBACaA,EAASC,cAAtBC,SAENd,KAAKe,SAAS,CACbzB,KAAMwB,EAAKxB,KACXC,QAASuB,EAAKvB,QACdC,WAAYsB,EAAKtB,WACjBC,SAAUqB,EAAKrB,SACfC,gBAAiBoB,EAAKpB,gKAKvBM,KAAKpB,+CAML,IAAMQ,EAAaY,KAAKI,MAExB,OACCvB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,MAAIG,GAAG,aAAP,+BACAL,EAAAC,EAAAC,cAACiC,EAAD,CAAmB5B,WAAcA,IACjCP,EAAAC,EAAAC,cAACkC,EAAD,CAAYrC,YAAaoB,KAAKpB,sBA5ChBsC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a794def3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const FindPlanet = ({ handleClick }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<button type=\"button\" onClick={handleClick} id=\"FindPlanetButton\">Find Random Planet</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react'\r\n\r\nconst PlanetInformation = ({ planetInfo }) => {\r\n\treturn(\r\n\t\t<div class=\"PlanetInformation\">\r\n\t\t<h1> Name:&nbsp;&nbsp;{planetInfo.name} </h1>\r\n\t\t<p> Climate:&nbsp;&nbsp;{planetInfo.climate}</p>\r\n\t\t<p>\tPopulation:&nbsp;&nbsp;{planetInfo.population}</p>\r\n\t\t<p> Diameter:&nbsp;&nbsp;{planetInfo.diameter}</p>\r\n\t\t<p> Rotation Period:&nbsp;&nbsp;{planetInfo.rotation_period}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default PlanetInformation","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { FindPlanet,fetchPlanet } from '../components/FindPlanet.js'\r\nimport PlanetInformation from '../components/PlanetInformation.js'\r\n\r\n\r\nclass App extends Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tname: '',\r\n\t\t\tclimate: '',\r\n\t\t\tpopulation: '',\r\n\t\t\tdiameter:'',\r\n\t\t\trotation_period:''\r\n\t\t}\r\n\r\n\t\tthis.handleClick = this.handleClick.bind(this); // needed to refresh window after each click\r\n\t};\r\n\r\n\t// fetch info from SWAPI on click\r\n\tasync handleClick(){\r\n\t\tconst randomNumber = ( Math.floor(Math.random() * 9) + 1);\r\n\t\tconst response = await fetch('https://swapi.co/api/planets/' + randomNumber + \"/\");\r\n\t\tconst data = await response.json();\r\n\r\n\t\tthis.setState({ \r\n\t\t\tname: data.name,\r\n\t\t\tclimate: data.climate,\r\n\t\t\tpopulation: data.population,\r\n\t\t\tdiameter: data.diameter,\r\n\t\t\trotation_period: data.rotation_period });\r\n\t}\r\n\t\r\n\t// fetch on load\r\n\tcomponentDidMount(){\r\n\t\tthis.handleClick();\r\n\t}\r\n\r\n\t// MAIN\r\n\trender() {\r\n\r\n\t\tconst planetInfo = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 id=\"titleText\">Star Wars API Planet Finder</h1>\r\n\t\t\t\t<PlanetInformation planetInfo = {planetInfo} />\r\n\t\t\t\t<FindPlanet handleClick={this.handleClick} />\r\n\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t};\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}